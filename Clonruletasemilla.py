import streamlit as st import random

st.set_page_config(page_title="Clonador de Semilla - Simulador", layout="centered")

st.title("游댏 Simulador de Clonaci칩n de Semilla de Ruleta") st.markdown("Este simulador imita c칩mo un atacante podr칤a intentar descubrir la semilla de una ruleta electr칩nica.")

Clase de RNG simple para simular una ruleta

class RNGSimulador: def init(self, semilla): self.random = random.Random(semilla)

def generar_numeros(self, cantidad=20):
    return [self.random.randint(0, 36) for _ in range(cantidad)]

entrada = st.text_input("Ingres치 una secuencia de entre 3 y 7 n칰meros separados por espacio:", "2 25 33 30 31") rango_max = st.slider("M치ximo de semillas a probar:", min_value=1000, max_value=500000, value=50000, step=1000)

if entrada: try: observados = list(map(int, entrada.strip().split()))

if not (3 <= len(observados) <= 7):
        st.warning("Ingres치 entre 3 y 7 n칰meros para la simulaci칩n.")
    else:
        semilla_encontrada = None
        secuencia_simulada = []

        with st.spinner("Buscando coincidencia de semilla..."):
            for semilla in range(rango_max):
                sim = RNGSimulador(semilla)
                numeros = sim.generar_numeros(len(observados))
                if numeros == observados:
                    semilla_encontrada = semilla
                    secuencia_simulada = sim.generar_numeros(20)
                    break

        if semilla_encontrada is not None:
            st.success(f"춰Semilla encontrada!: {semilla_encontrada}")
            st.write("**Pr칩ximos 20 n칰meros simulados por el atacante:**")
            st.code(" ".join(map(str, secuencia_simulada)))
        else:
            st.error("No se encontr칩 una semilla coincidente en el rango probado.")
except ValueError:
    st.error("Ingres치 solo n칰meros v치lidos separados por espacios.")

